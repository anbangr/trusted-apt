<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

<!ENTITY % aptent SYSTEM "apt.ent">
%aptent;

<!ENTITY % aptverbatiment SYSTEM "apt-verbatim.ent">
%aptverbatiment;

]>

<refentry>

 <refentryinfo>
   &apt-author.jgunthorpe;
   &apt-author.team;
   <author>
     <firstname>Daniel</firstname>
     <surname>Burrows</surname>
     <contrib>Initial documentation of Debug::*.</contrib>
     <email>dburrows@debian.org</email>
   </author>
   &apt-email;
   &apt-product;
   <!-- The last update date -->
   <date>16 January 2010</date>
 </refentryinfo>
 
 <refmeta>
   <refentrytitle>apt.conf</refentrytitle>
   <manvolnum>5</manvolnum>
   <refmiscinfo class="manual">APT</refmiscinfo>
 </refmeta>
 
 <!-- Man page title -->
 <refnamediv>
    <refname>apt.conf</refname>
    <refpurpose>Configuration file for APT</refpurpose>
 </refnamediv>
 
 <refsect1><title>Description</title>
 <para><filename>apt.conf</filename> is the main configuration file for
   the APT suite of tools, but by far not the only place changes to options
   can be made. All tools therefore share the configuration files and also
   use a common command line parser to provide a uniform environment.</para>
   <orderedlist>
      <para>When an APT tool starts up it will read the configuration files
      in the following order:</para>
      <listitem><para>the file specified by the <envar>APT_CONFIG</envar>
	 environment variable (if any)</para></listitem>
      <listitem><para>all files in <literal>Dir::Etc::Parts</literal> in
	 alphanumeric ascending order which have either no or "<literal>conf</literal>"
	 as filename extension and which only contain alphanumeric,
	 hyphen (-), underscore (_) and period (.) characters.
	 Otherwise APT will print a notice that it has ignored a file if the file
	 doesn't match a pattern in the <literal>Dir::Ignore-Files-Silently</literal>
	 configuration list - in this case it will be silently ignored.</para></listitem>
      <listitem><para>the main configuration file specified by
	 <literal>Dir::Etc::main</literal></para></listitem>
      <listitem><para>the command line options are applied to override the
	 configuration directives or to load even more configuration files.</para></listitem>
   </orderedlist>
   </refsect1>
   <refsect1><title>Syntax</title>
   <para>The configuration file is organized in a tree with options organized into
   functional groups. Option specification is given with a double colon
   notation, for instance <literal>APT::Get::Assume-Yes</literal> is an option within 
   the APT tool group, for the Get tool. Options do not inherit from their 
   parent groups.</para> 

   <para>Syntactically the configuration language is modeled after what the ISC tools
   such as bind and dhcp use. Lines starting with
   <literal>//</literal> are treated as comments (ignored), as well as all text
   between <literal>/*</literal> and <literal>*/</literal>, just like C/C++ comments.
   Each line is of the form
   <literal>APT::Get::Assume-Yes "true";</literal>. The trailing 
   semicolon and the quotes are required. The value must be on one line, and
   there is no kind of string concatenation. It must not include inside quotes.
   The behavior of the backslash "\" and escaped characters inside a value is
   undefined and it should not be used. An option name may include
   alphanumerical characters and the "/-:._+" characters. A new scope can
   be opened with curly braces, like:</para>

<informalexample><programlisting>   
APT {
  Get {
    Assume-Yes "true";
    Fix-Broken "true";
  };
};
</programlisting></informalexample>

   <para>with newlines placed to make it more readable. Lists can be created by 
   opening a scope and including a single string enclosed in quotes followed by a
   semicolon. Multiple entries can be included, each separated by a semicolon.</para>

<informalexample><programlisting>   
DPkg::Pre-Install-Pkgs {"/usr/sbin/dpkg-preconfigure --apt";};
</programlisting></informalexample>

   <para>In general the sample configuration file in 
   <filename>&docdir;examples/apt.conf</filename> &configureindex;
   is a good guide for how it should look.</para>

   <para>The names of the configuration items are not case-sensitive. So in the previous example
   you could use <literal>dpkg::pre-install-pkgs</literal>.</para>

   <para>Names for the configuration items are optional if a list is defined as it can be see in
   the <literal>DPkg::Pre-Install-Pkgs</literal> example above. If you don't specify a name a
   new entry will simply add a new option to the list. If you specify a name you can override
   the option as every other option by reassigning a new value to the option.</para>

   <para>Two specials are allowed, <literal>#include</literal> (which is deprecated
   and not supported by alternative implementations) and <literal>#clear</literal>:
   <literal>#include</literal> will include the given file, unless the filename
   ends in a slash, then the whole directory is included.  
   <literal>#clear</literal> is used to erase a part of the configuration tree. The
   specified element and all its descendants are erased.
   (Note that these lines also need to end with a semicolon.)</para>

   <para>The #clear command is the only way to delete a list or a complete scope.
   Reopening a scope or the ::-style described below will <emphasis>not</emphasis>
   override previously written entries. Only options can be overridden by addressing a new
   value to it - lists and scopes can't be overridden, only cleared.</para>

   <para>All of the APT tools take a -o option which allows an arbitrary configuration 
   directive to be specified on the command line. The syntax is a full option
   name (<literal>APT::Get::Assume-Yes</literal> for instance) followed by an equals
   sign then the new value of the option. Lists can be appended too by adding 
   a trailing :: to the list name. (As you might suspect: The scope syntax can't be used
   on the command line.)</para>

   <para>Note that you can use :: only for appending one item per line to a list and
   that you should not use it in combination with the scope syntax.
   (The scope syntax implicit insert ::) Using both syntaxes together will trigger a bug
   which some users unfortunately relay on: An option with the unusual name "<literal>::</literal>"
   which acts like every other option with a name. These introduces many problems
   including that a user who writes multiple lines in this <emphasis>wrong</emphasis> syntax in
   the hope to append to a list will gain the opposite as only the last assignment for this option
   "<literal>::</literal>" will be used. Upcoming APT versions will raise errors and
   will stop working if they encounter this misuse, so please correct such statements now
   as long as APT doesn't complain explicit about them.</para>
 </refsect1>

 <refsect1><title>The APT Group</title>
   <para>This group of options controls general APT behavior as well as holding the
   options for all of the tools.</para>

   <variablelist>
     <varlistentry><term>Architecture</term>
     <listitem><para>System Architecture; sets the architecture to use when fetching files and
     parsing package lists. The internal default is the architecture apt was 
     compiled for.</para></listitem>
     </varlistentry>

     <varlistentry><term>Architectures</term>
     <listitem><para>All Architectures the system supports. Processors implementing the <literal>amd64</literal>
     are e.g. also able to execute binaries compiled for <literal>i386</literal>; This list is use when fetching files and
     parsing package lists. The internal default is always the native architecture (<literal>APT::Architecture</literal>)
     and all foreign architectures it can retrieve by calling <command>dpkg --print-foreign-architectures</command>.
     </para></listitem>
     </varlistentry>

     <varlistentry><term>Default-Release</term>
     <listitem><para>Default release to install packages from if more than one
     version available. Contains release name, codename or release version. Examples: 'stable', 'testing',
     'unstable', '&stable-codename;', '&testing-codename;', '4.0', '5.0*'. See also &apt-preferences;.</para></listitem>
     </varlistentry>

     <varlistentry><term>Ignore-Hold</term>
     <listitem><para>Ignore Held packages; This global option causes the problem resolver to
     ignore held packages in its decision making.</para></listitem>
     </varlistentry>

     <varlistentry><term>Clean-Installed</term>
     <listitem><para>Defaults to on. When turned on the autoclean feature will remove any packages
     which can no longer be downloaded from the cache. If turned off then
     packages that are locally installed are also excluded from cleaning - but
     note that APT provides no direct means to reinstall them.</para></listitem>
     </varlistentry>

     <varlistentry><term>Immediate-Configure</term>
     <listitem><para>Defaults to on which will cause APT to install essential and important packages
     as fast as possible in the install/upgrade operation. This is done to limit the effect of a failing
     &dpkg; call: If this option is disabled APT does treat an important package in the same way as
     an extra package: Between the unpacking of the important package A and his configuration can then
     be many other unpack or configuration calls, e.g. for package B which has no relation to A, but
     causes the dpkg call to fail (e.g. because maintainer script of package B generates an error) which results
     in a system state in which package A is unpacked but unconfigured - each package depending on A is now no
     longer guaranteed to work as their dependency on A is not longer satisfied. The immediate configuration marker
     is also applied to all dependencies which can generate a problem if the dependencies e.g. form a circle
     as a dependency with the immediate flag is comparable with a Pre-Dependency. So in theory it is possible
     that APT encounters a situation in which it is unable to perform immediate configuration, errors out and
     refers to this option so the user can deactivate the immediate configuration temporarily to be able to perform
     an install/upgrade again. Note the use of the word "theory" here as this problem was only encountered by now
     in real world a few times in non-stable distribution versions and was caused by wrong dependencies of the package
     in question or by a system in an already broken state, so you should not blindly disable this option as
     the mentioned scenario above is not the only problem immediate configuration can help to prevent in the first place.
     Before a big operation like <literal>dist-upgrade</literal> is run with this option disabled it should be tried to
     explicitly <literal>install</literal> the package APT is unable to configure immediately, but please make sure to
     report your problem also to your distribution and to the APT team with the buglink below so they can work on
     improving or correcting the upgrade process.</para></listitem>
     </varlistentry>

     <varlistentry><term>Force-LoopBreak</term>
     <listitem><para>Never Enable this option unless you -really- know what you are doing. It
     permits APT to temporarily remove an essential package to break a
     Conflicts/Conflicts or Conflicts/Pre-Depend loop between two essential
     packages. SUCH A LOOP SHOULD NEVER EXIST AND IS A GRAVE BUG. This option 
     will work if the essential packages are not tar, gzip, libc, dpkg, bash or
     anything that those packages depend on.</para></listitem>
     </varlistentry>

     <varlistentry><term>Cache-Start, Cache-Grow and Cache-Limit</term>
     <listitem><para>APT uses since version 0.7.26 a resizable memory mapped cache file to store the 'available'
     information. <literal>Cache-Start</literal> acts as a hint to which size the Cache will grow
     and is therefore the amount of memory APT will request at startup. The default value is
     20971520 bytes (~20 MB). Note that these amount of space need to be available for APT
     otherwise it will likely fail ungracefully, so for memory restricted devices these value should
     be lowered while on systems with a lot of configured sources this might be increased.
     <literal>Cache-Grow</literal> defines in byte with the default of 1048576 (~1 MB) how much
     the Cache size will be increased in the event the space defined by <literal>Cache-Start</literal>
     is not enough. These value will be applied again and again until either the cache is big
     enough to store all information or the size of the cache reaches the <literal>Cache-Limit</literal>.
     The default of <literal>Cache-Limit</literal> is 0 which stands for no limit.
     If <literal>Cache-Grow</literal> is set to 0 the automatic grow of the cache is disabled.
     </para></listitem>
     </varlistentry>

     <varlistentry><term>Build-Essential</term>
     <listitem><para>Defines which package(s) are considered essential build dependencies.</para></listitem>
     </varlistentry>

     <varlistentry><term>Get</term>
     <listitem><para>The Get subsection controls the &apt-get; tool, please see its
     documentation for more information about the options here.</para></listitem>
     </varlistentry>

     <varlistentry><term>Cache</term>
     <listitem><para>The Cache subsection controls the &apt-cache; tool, please see its
     documentation for more information about the options here.</para></listitem>
     </varlistentry>

     <varlistentry><term>CDROM</term>
     <listitem><para>The CDROM subsection controls the &apt-cdrom; tool, please see its
     documentation for more information about the options here.</para></listitem>
     </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1><title>The Acquire Group</title>
   <para>The <literal>Acquire</literal> group of options controls the download of packages 
   and the URI handlers. 

   <variablelist>
     <varlistentry><term>Check-Valid-Until</term>
	 <listitem><para>Security related option defaulting to true as an
	 expiring validation for a Release file prevents longtime replay attacks
	 and can e.g. also help users to identify no longer updated mirrors -
	 but the feature depends on the correctness of the time on the user system.
	 Archive maintainers are encouraged to create Release files with the
	 <literal>Valid-Until</literal> header, but if they don't or a stricter value
	 is volitional the following <literal>Max-ValidTime</literal> option can be used.
	 </para></listitem>
     </varlistentry>

     <varlistentry><term>Max-ValidTime</term>
	 <listitem><para>Seconds the Release file should be considered valid after
	 it was created (indicated by the <literal>Date</literal> header).
	 If the Release file itself includes a <literal>Valid-Until</literal> header
	 the earlier date of the two is used as the expiration date.
	 The default value is <literal>0</literal> which stands for "for ever".
	 Archive specific settings can be made by appending the label of the archive
	 to the option name.
	 </para></listitem>
     </varlistentry>

     <varlistentry><term>Min-ValidTime</term>
	 <listitem><para>Minimum of seconds the Release file should be considered
	 valid after it was created (indicated by the <literal>Date</literal> header).
	 Use this if you need to use a seldomly updated (local) mirror of a more
	 regular updated archive with a <literal>Valid-Until</literal> header
	 instead of completely disabling the expiration date checking.
	 Archive specific settings can and should be used by appending the label of
	 the archive to the option name.
	 </para></listitem>
     </varlistentry>

     <varlistentry><term>PDiffs</term>
	 <listitem><para>Try to download deltas called <literal>PDiffs</literal> for
	 Packages or Sources files instead of downloading whole ones. True
	 by default.</para>
	 <para>Two sub-options to limit the use of PDiffs are also available:
	 With <literal>FileLimit</literal> can be specified how many PDiff files
	 are downloaded at most to patch a file. <literal>SizeLimit</literal>
	 on the other hand is the maximum percentage of the size of all patches
	 compared to the size of the targeted file. If one of these limits is
	 exceeded the complete file is downloaded instead of the patches.
	 </para></listitem>
     </varlistentry>

     <varlistentry><term>Queue-Mode</term>
     <listitem><para>Queuing mode; <literal>Queue-Mode</literal> can be one of <literal>host</literal> or 
     <literal>access</literal> which determines how  APT parallelizes outgoing 
     connections. <literal>host</literal> means that one connection per target host 
     will be opened, <literal>access</literal> means that one connection per URI type 
     will be opened.</para></listitem>
     </varlistentry>

     <varlistentry><term>Retries</term>
     <listitem><para>Number of retries to perform. If this is non-zero APT will retry failed 
     files the given number of times.</para></listitem>
     </varlistentry>

     <varlistentry><term>Source-Symlinks</term>
     <listitem><para>Use symlinks for source archives. If set to true then source archives will
     be symlinked when possible instead of copying. True is the default.</para></listitem>
     </varlistentry>

     <varlistentry><term>http</term>
     <listitem><para>HTTP URIs; http::Proxy is the default http proxy to use. It is in the 
     standard form of <literal>http://[[user][:pass]@]host[:port]/</literal>. Per 
     host proxies can also be specified by using the form 
     <literal>http::Proxy::&lt;host&gt;</literal> with the special keyword <literal>DIRECT</literal> 
	 meaning to use no proxies. If no one of the above settings is specified,
	 <envar>http_proxy</envar> environment variable
	 will be used.</para>

     <para>Three settings are provided for cache control with HTTP/1.1 compliant 
     proxy caches. <literal>No-Cache</literal> tells the proxy to not use its cached 
     response under any circumstances, <literal>Max-Age</literal> is sent only for 
     index files and tells the cache to refresh its object if it is older than 
     the given number of seconds. Debian updates its index files daily so the 
     default is 1 day. <literal>No-Store</literal> specifies that the cache should never 
     store this request, it is only set for archive files. This may be useful 
     to prevent polluting a proxy cache with very large .deb files. Note: 
     Squid 2.0.2 does not support any of these options.</para>

     <para>The option <literal>timeout</literal> sets the timeout timer used by the method, 
     this applies to all things including connection timeout and data timeout.</para>

     <para>One setting is provided to control the pipeline depth in cases where the
     remote server is not RFC conforming or buggy (such as Squid 2.0.2).
     <literal>Acquire::http::Pipeline-Depth</literal> can be a value from 0 to 5 
     indicating how many outstanding requests APT should send. A value of
     zero MUST be specified if the remote host does not properly linger
     on TCP connections - otherwise data corruption will occur. Hosts which
     require this are in violation of RFC 2068.</para>

     <para>The used bandwidth can be limited with <literal>Acquire::http::Dl-Limit</literal>
     which accepts integer values in kilobyte. The default value is 0 which deactivates
     the limit and tries uses as much as possible of the bandwidth (Note that this option implicit
     deactivates the download from multiple servers at the same time.)</para>

     <para><literal>Acquire::http::User-Agent</literal> can be used to set a different
     User-Agent for the http download method as some proxies allow access for clients
     only if the client uses a known identifier.</para>
     </listitem>
     </varlistentry>

     <varlistentry><term>https</term>
	 <listitem><para>HTTPS URIs. Cache-control, Timeout, AllowRedirect, Dl-Limit and
	 proxy options are the same as for <literal>http</literal> method and will also
	 default to the options from the <literal>http</literal> method if they are not
	 explicitly set for https. <literal>Pipeline-Depth</literal> option is not
	 supported yet.</para>

	 <para><literal>CaInfo</literal> suboption specifies place of file that
	 holds info about trusted certificates.
	 <literal>&lt;host&gt;::CaInfo</literal> is corresponding per-host option.
	 <literal>Verify-Peer</literal> boolean suboption determines whether verify
	 server's host certificate against trusted certificates or not.
	 <literal>&lt;host&gt;::Verify-Peer</literal> is corresponding per-host option.
	 <literal>Verify-Host</literal> boolean suboption determines whether verify
	 server's hostname or not.
	 <literal>&lt;host&gt;::Verify-Host</literal> is corresponding per-host option.
	 <literal>SslCert</literal> determines what certificate to use for client
	 authentication. <literal>&lt;host&gt;::SslCert</literal> is corresponding per-host option.
	 <literal>SslKey</literal> determines what private key to use for client
	 authentication. <literal>&lt;host&gt;::SslKey</literal> is corresponding per-host option.
	 <literal>SslForceVersion</literal> overrides default SSL version to use.
	 Can contain 'TLSv1' or 'SSLv3' string.
	 <literal>&lt;host&gt;::SslForceVersion</literal> is corresponding per-host option.
	 </para></listitem></varlistentry>

     <varlistentry><term>ftp</term>
     <listitem><para>FTP URIs; ftp::Proxy is the default ftp proxy to use. It is in the 
     standard form of <literal>ftp://[[user][:pass]@]host[:port]/</literal>. Per 
     host proxies can also be specified by using the form 
     <literal>ftp::Proxy::&lt;host&gt;</literal> with the special keyword <literal>DIRECT</literal> 
	 meaning to use no proxies. If no one of the above settings is specified,
	 <envar>ftp_proxy</envar> environment variable
	 will be used. To use a ftp 
     proxy you will have to set the <literal>ftp::ProxyLogin</literal> script in the 
     configuration file. This entry specifies the commands to send to tell 
     the proxy server what to connect to. Please see 
     &configureindex; for an example of 
     how to do this. The substitution variables available are 
     <literal>$(PROXY_USER)</literal> <literal>$(PROXY_PASS)</literal> <literal>$(SITE_USER)</literal>
     <literal>$(SITE_PASS)</literal> <literal>$(SITE)</literal> and <literal>$(SITE_PORT)</literal>
     Each is taken from it's respective URI component.</para>

     <para>The option <literal>timeout</literal> sets the timeout timer used by the method, 
     this applies to all things including connection timeout and data timeout.</para>

     <para>Several settings are provided to control passive mode. Generally it is 
     safe to leave passive mode on, it works in nearly every environment. 
     However some situations require that passive mode be disabled and port 
     mode ftp used instead. This can be done globally, for connections that 
     go through a proxy or for a specific host (See the sample config file 
     for examples).</para>

     <para>It is possible to proxy FTP over HTTP by setting the <envar>ftp_proxy</envar>
     environment variable to a http url - see the discussion of the http method
     above for syntax. You cannot set this in the configuration file and it is
     not recommended to use FTP over HTTP due to its low efficiency.</para>

     <para>The setting <literal>ForceExtended</literal> controls the use of RFC2428 
     <literal>EPSV</literal> and <literal>EPRT</literal> commands. The default is false, which means
     these commands are only used if the control connection is IPv6. Setting this
     to true forces their use even on IPv4 connections. Note that most FTP servers
     do not support RFC2428.</para></listitem>
     </varlistentry>

     <varlistentry><term>cdrom</term>
     <listitem><para>CDROM URIs; the only setting for CDROM URIs is the mount point, 
     <literal>cdrom::Mount</literal> which must be the mount point for the CDROM drive 
     as specified in <filename>/etc/fstab</filename>. It is possible to provide 
     alternate mount and unmount commands if your mount point cannot be listed 
     in the fstab (such as an SMB mount and old mount packages). The syntax 
     is to put <literallayout>/cdrom/::Mount "foo";</literallayout> within 
     the cdrom block. It is important to have the trailing slash. Unmount 
     commands can be specified using UMount.</para></listitem>
     </varlistentry>

     <varlistentry><term>gpgv</term>
     <listitem><para>GPGV URIs; the only option for GPGV URIs is the option to pass additional parameters to gpgv.
     <literal>gpgv::Options</literal> Additional options passed to gpgv.
     </para></listitem>
     </varlistentry>

     <varlistentry><term>CompressionTypes</term>
     <listitem><para>List of compression types which are understood by the acquire methods.
     Files like <filename>Packages</filename> can be available in various compression formats.
     Per default the acquire methods can decompress <command>bzip2</command>, <command>lzma</command>
     and <command>gzip</command> compressed files, with this setting more formats can be added
     on the fly or the used method can be changed. The syntax for this is:
     <synopsis>Acquire::CompressionTypes::<replaceable>FileExtension</replaceable> "<replaceable>Methodname</replaceable>";</synopsis>
     </para><para>Also the <literal>Order</literal> subgroup can be used to define in which order
     the acquire system will try to download the compressed files. The acquire system will try the first
     and proceed with the next compression type in this list on error, so to prefer one over the other type
     simple add the preferred type at first - not already added default types will be added at run time
     to the end of the list, so e.g. <synopsis>Acquire::CompressionTypes::Order:: "gz";</synopsis> can
     be used to prefer <command>gzip</command> compressed files over <command>bzip2</command> and <command>lzma</command>.
     If <command>lzma</command> should be preferred over <command>gzip</command> and <command>bzip2</command> the
     configure setting should look like this <synopsis>Acquire::CompressionTypes::Order { "lzma"; "gz"; };</synopsis>
     It is not needed to add <literal>bz2</literal> explicit to the list as it will be added automatic.</para>
     <para>Note that at run time the <literal>Dir::Bin::<replaceable>Methodname</replaceable></literal> will
     be checked: If this setting exists the method will only be used if this file exists, e.g. for
     the bzip2 method (the inbuilt) setting is: <literallayout>Dir::Bin::bzip2 "/bin/bzip2";</literallayout>
     Note also that list entries specified on the command line will be added at the end of the list
     specified in the configuration files, but before the default entries. To prefer a type in this case
     over the ones specified in the configuration files you can set the option direct - not in list style.
     This will not override the defined list, it will only prefix the list with this type.</para>
     <para>The special type <literal>uncompressed</literal> can be used to give uncompressed files a
     preference, but note that most archives don't provide uncompressed files so this is mostly only
     useable for local mirrors.</para></listitem>
     </varlistentry>

     <varlistentry><term>GzipIndexes</term>
	 <listitem><para>
	 When downloading <literal>gzip</literal> compressed indexes (Packages, Sources, or
	 Translations), keep them gzip compressed locally instead of unpacking
	 them. This saves quite a lot of disk space at the expense of more CPU
	 requirements when building the local package caches. False by default.
	 </para></listitem>
     </varlistentry>

     <varlistentry><term>Languages</term>
     <listitem><para>The Languages subsection controls which <filename>Translation</filename> files are downloaded
     and in which order APT tries to display the Description-Translations. APT will try to display the first
     available Description in the Language which is listed at first. Languages can be defined with their
     short or long Languagecodes. Note that not all archives provide <filename>Translation</filename>
     files for every Language - especially the long Languagecodes are rare, so please
     inform you which ones are available before you set here impossible values.</para>
     <para>The default list includes "environment" and "en". "<literal>environment</literal>" has a special meaning here:
     It will be replaced at runtime with the languagecodes extracted from the <literal>LC_MESSAGES</literal> environment variable.
     It will also ensure that these codes are not included twice in the list. If <literal>LC_MESSAGES</literal>
     is set to "C" only the <filename>Translation-en</filename> file (if available) will be used.
     To force apt to use no Translation file use the setting <literal>Acquire::Languages=none</literal>. "<literal>none</literal>"
     is another special meaning code which will stop the search for a fitting <filename>Translation</filename> file.
     This can be used by the system administrator to let APT know that it should download also this files without
     actually use them if the environment doesn't specify this languages. So the following example configuration will
     result in the order "en, de" in an english and in "de, en" in a german localization. Note that "fr" is downloaded,
     but not used if APT is not used in a french localization, in such an environment the order would be "fr, de, en".
     <programlisting>Acquire::Languages { "environment"; "de"; "en"; "none"; "fr"; };</programlisting></para></listitem>
     </varlistentry>

   </variablelist>
  </para>
 </refsect1>

 <refsect1><title>Directories</title>

   <para>The <literal>Dir::State</literal> section has directories that pertain to local 
   state information. <literal>lists</literal> is the directory to place downloaded 
   package lists in and <literal>status</literal> is the name of the dpkg status file.
   <literal>preferences</literal> is the name of the APT preferences file.
   <literal>Dir::State</literal> contains the default directory to prefix on all sub 
   items if they do not start with <filename>/</filename> or <filename>./</filename>.</para>

   <para><literal>Dir::Cache</literal> contains locations pertaining to local cache 
   information, such as the two package caches <literal>srcpkgcache</literal> and 
   <literal>pkgcache</literal> as well as the location to place downloaded archives, 
   <literal>Dir::Cache::archives</literal>. Generation of caches can be turned off
   by setting their names to be blank. This will slow down startup but
   save disk space. It is probably preferred to turn off the pkgcache rather
   than the srcpkgcache. Like <literal>Dir::State</literal> the default
   directory is contained in <literal>Dir::Cache</literal></para>

   <para><literal>Dir::Etc</literal> contains the location of configuration files, 
   <literal>sourcelist</literal> gives the location of the sourcelist and 
   <literal>main</literal> is the default configuration file (setting has no effect,
   unless it is done from the config file specified by 
   <envar>APT_CONFIG</envar>).</para>

   <para>The <literal>Dir::Parts</literal> setting reads in all the config fragments in 
   lexical order from the directory specified. After this is done then the
   main config file is loaded.</para>

   <para>Binary programs are pointed to by <literal>Dir::Bin</literal>. <literal>Dir::Bin::Methods</literal> 
   specifies the location of the method handlers and <literal>gzip</literal>, 
   <literal>bzip2</literal>, <literal>lzma</literal>,
   <literal>dpkg</literal>, <literal>apt-get</literal> <literal>dpkg-source</literal> 
   <literal>dpkg-buildpackage</literal> and <literal>apt-cache</literal> specify the location
   of the respective programs.</para>

   <para>
     The configuration item <literal>RootDir</literal> has a special
     meaning.  If set, all paths in <literal>Dir::</literal> will be
     relative to <literal>RootDir</literal>, <emphasis>even paths that
     are specified absolutely</emphasis>.  So, for instance, if
     <literal>RootDir</literal> is set to
     <filename>/tmp/staging</filename> and
     <literal>Dir::State::status</literal> is set to
     <filename>/var/lib/dpkg/status</filename>, then the status file
     will be looked up in
     <filename>/tmp/staging/var/lib/dpkg/status</filename>.
   </para>

   <para>
      The <literal>Ignore-Files-Silently</literal> list can be used to specify
      which files APT should silently ignore while parsing the files in the
      fragment directories. Per default a file which end with <literal>.disabled</literal>,
      <literal>~</literal>, <literal>.bak</literal> or <literal>.dpkg-[a-z]+</literal>
      is silently ignored. As seen in the last default value these patterns can use regular
      expression syntax.
   </para>
 </refsect1>
 
 <refsect1><title>APT in DSelect</title>
   <para>   
   When APT is used as a &dselect; method several configuration directives
   control the default behaviour. These are in the <literal>DSelect</literal> section.</para>
   
   <variablelist>
     <varlistentry><term>Clean</term>
     <listitem><para>Cache Clean mode; this value may be one of always, prompt, auto,
     pre-auto and never.  always and prompt will remove all packages from
     the cache after upgrading, prompt (the default) does so conditionally. 
     auto removes only those packages which are no longer downloadable
     (replaced with a new version for instance).  pre-auto performs this
     action before downloading new packages.</para></listitem>
     </varlistentry>

     <varlistentry><term>options</term>
     <listitem><para>The contents of this variable is passed to &apt-get; as command line
     options when it is run for the install phase.</para></listitem>
     </varlistentry>

     <varlistentry><term>Updateoptions</term>
     <listitem><para>The contents of this variable is passed to &apt-get; as command line
     options when it is run for the update phase.</para></listitem>
     </varlistentry>

     <varlistentry><term>PromptAfterUpdate</term>
     <listitem><para>If true the [U]pdate operation in &dselect; will always prompt to continue. 
     The default is to prompt only on error.</para></listitem>
     </varlistentry>
   </variablelist>
 </refsect1>
 
 <refsect1><title>How APT calls dpkg</title>
   <para>Several configuration directives control how APT invokes &dpkg;. These are 
   in the <literal>DPkg</literal> section.</para>

   <variablelist>
     <varlistentry><term>options</term>
     <listitem><para>This is a list of options to pass to dpkg. The options must be specified
     using the list notation and each list item is passed as a single argument
     to &dpkg;.</para></listitem>
     </varlistentry>
     
     <varlistentry><term>Pre-Invoke</term><term>Post-Invoke</term>
     <listitem><para>This is a list of shell commands to run before/after invoking &dpkg;. 
     Like <literal>options</literal> this must be specified in list notation. The 
     commands are invoked in order using <filename>/bin/sh</filename>, should any 
     fail APT will abort.</para></listitem>
     </varlistentry>

     <varlistentry><term>Pre-Install-Pkgs</term>
     <listitem><para>This is a list of shell commands to run before invoking dpkg. Like
     <literal>options</literal> this must be specified in list notation. The commands
     are invoked in order using <filename>/bin/sh</filename>, should any fail APT 
     will abort. APT will pass to the commands on standard input the 
     filenames of all .deb files it is going to install, one per line.</para>

     <para>Version 2 of this protocol dumps more information, including the 
     protocol version, the APT configuration space and the packages, files
     and versions being changed. Version 2 is enabled by setting 
     <literal>DPkg::Tools::options::cmd::Version</literal> to 2. <literal>cmd</literal> is a
     command given to <literal>Pre-Install-Pkgs</literal>.</para></listitem>
     </varlistentry>

     <varlistentry><term>Run-Directory</term>
     <listitem><para>APT chdirs to this directory before invoking dpkg, the default is 
     <filename>/</filename>.</para></listitem>
     </varlistentry>

     <varlistentry><term>Build-options</term>
     <listitem><para>These options are passed to &dpkg-buildpackage; when compiling packages,
     the default is to disable signing and produce all binaries.</para></listitem>
     </varlistentry>
   </variablelist>

   <refsect2><title>dpkg trigger usage (and related options)</title>
     <para>APT can call dpkg in a way so it can make aggressive use of triggers over
     multiple calls of dpkg. Without further options dpkg will use triggers only in between his
     own run. Activating these options can therefore decrease the time needed to perform the
     install / upgrade. Note that it is intended to activate these options per default in the
     future, but as it changes the way APT calling dpkg drastically it needs a lot more testing.
     <emphasis>These options are therefore currently experimental and should not be used in
     productive environments.</emphasis> Also it breaks the progress reporting so all frontends will
     currently stay around half (or more) of the time in the 100% state while it actually configures
     all packages.</para>
     <para>Note that it is not guaranteed that APT will support these options or that these options will
     not cause (big) trouble in the future. If you have understand the current risks and problems with
     these options, but are brave enough to help testing them create a new configuration file and test a
     combination of options. Please report any bugs, problems and improvements you encounter and make sure
     to note which options you have used in your reports. Asking dpkg for help could also be useful for
     debugging proposes, see e.g. <command>dpkg --audit</command>. A defensive option combination would be
<literallayout>DPkg::NoTriggers "true";
PackageManager::Configure "smart";
DPkg::ConfigurePending "true";
DPkg::TriggersPending "true";</literallayout></para>

     <variablelist>
       <varlistentry><term>DPkg::NoTriggers</term>
       <listitem><para>Add the no triggers flag to all dpkg calls (except the ConfigurePending call).
       See &dpkg; if you are interested in what this actually means. In short: dpkg will not run the
       triggers when this flag is present unless it is explicitly called to do so in an extra call.
       Note that this option exists (undocumented) also in older apt versions with a slightly different
       meaning: Previously these option only append --no-triggers to the configure calls to dpkg -
       now apt will add these flag also to the unpack and remove calls.</para></listitem>
       </varlistentry>
       <varlistentry><term>PackageManager::Configure</term>
       <listitem><para>Valid values are "<literal>all</literal>", "<literal>smart</literal>" and "<literal>no</literal>".
       "<literal>all</literal>" is the default value and causes APT to configure all packages explicit.
       The "<literal>smart</literal>" way is it to configure only packages which need to be configured before
       another package can be unpacked (Pre-Depends) and let the rest configure by dpkg with a call generated
       by the next option. "<literal>no</literal>" on the other hand will not configure anything and totally
       rely on dpkg for configuration (which will at the moment fail if a Pre-Depends is encountered).
       Setting this option to another than the all value will implicitly activate also the next option per
       default as otherwise the system could end in an unconfigured status which could be unbootable!
       </para></listitem>
       </varlistentry>
       <varlistentry><term>DPkg::ConfigurePending</term>
       <listitem><para>If this option is set apt will call <command>dpkg --configure --pending</command>
       to let dpkg handle all required configurations and triggers. This option is activated automatic
       per default if the previous option is not set to <literal>all</literal>, but deactivating could be useful
       if you want to run APT multiple times in a row - e.g. in an installer. In these sceneries you could
       deactivate this option in all but the last run.</para></listitem>
       </varlistentry>
       <varlistentry><term>DPkg::TriggersPending</term>
       <listitem><para>Useful for <literal>smart</literal> configuration as a package which has pending
       triggers is not considered as <literal>installed</literal> and dpkg treats them as <literal>unpacked</literal>
       currently which is a dealbreaker for Pre-Dependencies (see debbugs #526774). Note that this will
       process all triggers, not only the triggers needed to configure this package.</para></listitem>
       </varlistentry>
       <varlistentry><term>PackageManager::UnpackAll</term>
       <listitem><para>As the configuration can be deferred to be done at the end by dpkg it can be
       tried to order the unpack series only by critical needs, e.g. by Pre-Depends. Default is true
       and therefore the "old" method of ordering in various steps by everything. While both method
       were present in earlier APT versions the <literal>OrderCritical</literal> method was unused, so
       this method is very experimental and needs further improvements before becoming really useful.
       </para></listitem>
       </varlistentry>
       <varlistentry><term>OrderList::Score::Immediate</term>
       <listitem><para>Essential packages (and there dependencies) should be configured immediately
       after unpacking. It will be a good idea to do this quite early in the upgrade process as these
       these configure calls require currently also <literal>DPkg::TriggersPending</literal> which
       will run quite a few triggers (which maybe not needed). Essentials get per default a high score
       but the immediate flag is relatively low (a package which has a Pre-Depends is higher rated).
       These option and the others in the same group can be used to change the scoring. The following
       example shows the settings with there default values.
       <literallayout>OrderList::Score {
	Delete 500;
	Essential 200;
	Immediate 10;
	PreDepends 50;
};</literallayout>
       </para></listitem>
       </varlistentry>
     </variablelist>
   </refsect2>
 </refsect1>

 <refsect1>
   <title>Periodic and Archives options</title>
   <para><literal>APT::Periodic</literal> and <literal>APT::Archives</literal>
   groups of options configure behavior of apt periodic updates, which is
   done by <literal>/etc/cron.daily/apt</literal> script. See header of
   this script for the brief documentation of these options.
   </para>
 </refsect1>

 <refsect1>
   <title>Debug options</title>
   <para>
     Enabling options in the <literal>Debug::</literal> section will
     cause debugging information to be sent to the standard error
     stream of the program utilizing the <literal>apt</literal>
     libraries, or enable special program modes that are primarily
     useful for debugging the behavior of <literal>apt</literal>.
     Most of these options are not interesting to a normal user, but a
     few may be:

     <itemizedlist>
       <listitem>
	 <para>
	   <literal>Debug::pkgProblemResolver</literal> enables output
	   about the decisions made by
	   <literal>dist-upgrade, upgrade, install, remove, purge</literal>.
	 </para>
       </listitem>

       <listitem>
	 <para>
	   <literal>Debug::NoLocking</literal> disables all file
	   locking.  This can be used to run some operations (for
	   instance, <literal>apt-get -s install</literal>) as a
	   non-root user.
	 </para>
       </listitem>

       <listitem>
	 <para>
	   <literal>Debug::pkgDPkgPM</literal> prints out the actual
	   command line each time that <literal>apt</literal> invokes
	   &dpkg;.
	 </para>
       </listitem>

       <listitem>
	 <para>
	   <literal>Debug::IdentCdrom</literal> disables the inclusion
	   of statfs data in CDROM IDs.  <!-- TODO: provide a
	   motivating example, except I haven't a clue why you'd want
	   to do this. -->
	 </para>
       </listitem>
     </itemizedlist>
   </para>

   <para>
     A full list of debugging options to apt follows.
   </para>

   <variablelist>
     <varlistentry>
       <term><literal>Debug::Acquire::cdrom</literal></term>

       <listitem>
	 <para>
	   Print information related to accessing
	   <literal>cdrom://</literal> sources.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::Acquire::ftp</literal></term>

       <listitem>
	 <para>
	   Print information related to downloading packages using
	   FTP.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::Acquire::http</literal></term>

       <listitem>
	 <para>
	   Print information related to downloading packages using
	   HTTP.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::Acquire::https</literal></term>

       <listitem>
	 <para>
	   Print information related to downloading packages using
	   HTTPS.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::Acquire::gpgv</literal></term>

       <listitem>
	 <para>
	   Print information related to verifying cryptographic
	   signatures using <literal>gpg</literal>.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::aptcdrom</literal></term>

       <listitem>
	 <para>
	   Output information about the process of accessing
	   collections of packages stored on CD-ROMs.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::BuildDeps</literal></term>
       <listitem>
	 <para>
	   Describes the process of resolving build-dependencies in
	   &apt-get;.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::Hashes</literal></term>
       <listitem>
	 <para>
	   Output each cryptographic hash that is generated by the
	   <literal>apt</literal> libraries.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::IdentCDROM</literal></term>
       <listitem>
	 <para>
	   Do not include information from <literal>statfs</literal>,
	   namely the number of used and free blocks on the CD-ROM
	   filesystem, when generating an ID for a CD-ROM.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::NoLocking</literal></term>
       <listitem>
	 <para>
	   Disable all file locking.  For instance, this will allow
	   two instances of <quote><literal>apt-get
	   update</literal></quote> to run at the same time.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgAcquire</literal></term>

       <listitem>
	 <para>
	   Log when items are added to or removed from the global
	   download queue.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgAcquire::Auth</literal></term>
       <listitem>
	 <para>
	   Output status messages and errors related to verifying
	   checksums and cryptographic signatures of downloaded files.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgAcquire::Diffs</literal></term>
       <listitem>
	 <para>
	   Output information about downloading and applying package
	   index list diffs, and errors relating to package index list
	   diffs.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgAcquire::RRed</literal></term>

       <listitem>
	 <para>
	   Output information related to patching apt package lists
	   when downloading index diffs instead of full indices.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgAcquire::Worker</literal></term>

       <listitem>
	 <para>
	   Log all interactions with the sub-processes that actually
	   perform downloads.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgAutoRemove</literal></term>

       <listitem>
	 <para>
	   Log events related to the automatically-installed status of
	   packages and to the removal of unused packages.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgDepCache::AutoInstall</literal></term>
       <listitem>
	 <para>
	   Generate debug messages describing which packages are being
	   automatically installed to resolve dependencies.  This
	   corresponds to the initial auto-install pass performed in,
	   e.g., <literal>apt-get install</literal>, and not to the
	   full <literal>apt</literal> dependency resolver; see
	   <literal>Debug::pkgProblemResolver</literal> for that.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgDepCache::Marker</literal></term>
       <listitem>
        <para>
           Generate debug messages describing which package is marked
          as keep/install/remove while the ProblemResolver does his work.
          Each addition or deletion may trigger additional actions;
          they are shown indented two additional space under the original entry.
          The format for each line is <literal>MarkKeep</literal>,
          <literal>MarkDelete</literal> or <literal>MarkInstall</literal> followed by
          <literal>package-name &lt;a.b.c -&gt; d.e.f | x.y.z&gt; (section)</literal>
          where <literal>a.b.c</literal> is the current version of the package,
          <literal>d.e.f</literal> is the version considered for installation and
          <literal>x.y.z</literal> is a newer version, but not considered for installation
          (because of a low pin score). The later two can be omitted if there is none or if
          it is the same version as the installed.
          <literal>section</literal> is the name of the section the package appears in.
        </para>
       </listitem>
     </varlistentry>

     <!-- Question: why doesn't this do anything?  The code says it should. -->
     <varlistentry>
       <term><literal>Debug::pkgInitConfig</literal></term>
       <listitem>
	 <para>
	   Dump the default configuration to standard error on
	   startup.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgDPkgPM</literal></term>
       <listitem>
	 <para>
	   When invoking &dpkg;, output the precise command line with
	   which it is being invoked, with arguments separated by a
	   single space character.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgDPkgProgressReporting</literal></term>
       <listitem>
	 <para>
	   Output all the data received from &dpkg; on the status file
	   descriptor and any errors encountered while parsing it.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgOrderList</literal></term>

       <listitem>
	 <para>
	   Generate a trace of the algorithm that decides the order in
	   which <literal>apt</literal> should pass packages to
	   &dpkg;.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgPackageManager</literal></term>

       <listitem>
	 <para>
	   Output status messages tracing the steps performed when
	   invoking &dpkg;.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgPolicy</literal></term>

       <listitem>
	 <para>
	   Output the priority of each package list on startup.
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgProblemResolver</literal></term>

       <listitem>
	 <para>
	   Trace the execution of the dependency resolver (this
	   applies only to what happens when a complex dependency
	   problem is encountered).
	 </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::pkgProblemResolver::ShowScores</literal></term>
       <listitem>
        <para>
          Display a list of all installed packages with their calculated score
          used by the pkgProblemResolver. The description of the package
          is the same as described in <literal>Debug::pkgDepCache::Marker</literal>
        </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><literal>Debug::sourceList</literal></term>

       <listitem>
	 <para>
	   Print information about the vendors read from
	   <filename>/etc/apt/vendors.list</filename>.
	 </para>
       </listitem>
     </varlistentry>

<!-- 2009/07/11 Currently used nowhere. The corresponding code
is commented.
     <varlistentry>
       <term><literal>Debug::Vendor</literal></term>

       <listitem>
	 <para>
	   Print information about each vendor.
	 </para>
       </listitem>
     </varlistentry>
-->

   </variablelist>
 </refsect1>
 
 <refsect1><title>Examples</title>
   <para>&configureindex; is a 
   configuration file showing example values for all possible 
   options.</para>
 </refsect1>
 
 <refsect1><title>Files</title>
   <variablelist>
      &file-aptconf;
   </variablelist>
 </refsect1>
 
 <refsect1><title>See Also</title>
   <para>&apt-cache;, &apt-config;<!-- ? reading apt.conf -->, &apt-preferences;.</para>
 </refsect1>

 &manbugs;
 
</refentry>

